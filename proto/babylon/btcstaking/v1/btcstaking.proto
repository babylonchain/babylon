syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "babylon/btcstaking/v1/pop.proto";

option go_package = "github.com/babylonchain/babylon/x/btcstaking/types";

// FinalityProvider defines a finality provider
message FinalityProvider {
    // addr is the bech32 address identifier of the finality provider.
    string addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // description defines the description terms for the finality provider.
    cosmos.staking.v1beta1.Description description = 2;
    // commission defines the commission rate of the finality provider.
    string commission = 3  [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
    ];
    // btc_pk is the Bitcoin secp256k1 PK of this finality provider
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // pop is the proof of possession of the btc_pk, where the BTC
    // private key signs the bech32 bbn addr of the finality provider.
    ProofOfPossessionBTC pop = 5;
    // slashed_babylon_height indicates the Babylon height when
    // the finality provider is slashed.
    // if it's 0 then the finality provider is not slashed
    uint64 slashed_babylon_height = 6;
    // slashed_btc_height indicates the BTC height when
    // the finality provider is slashed.
    // if it's 0 then the finality provider is not slashed
    uint64 slashed_btc_height = 7;
    // jailed defines whether the finality provider has been jailed
    bool jailed = 8;
}

// FinalityProviderWithMeta wraps the FinalityProvider with metadata.
message FinalityProviderWithMeta {
    // btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 1 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // height is the queried Babylon height
    uint64 height = 2;
    // voting_power is the voting power of this finality provider at the given height
    uint64 voting_power = 3;
    // slashed_babylon_height indicates the Babylon height when
    // the finality provider is slashed.
    // if it's 0 then the finality provider is not slashed
    uint64 slashed_babylon_height = 4;
    // slashed_btc_height indicates the BTC height when
    // the finality provider is slashed.
    // if it's 0 then the finality provider is not slashed
    uint64 slashed_btc_height = 5;
    // jailed defines whether the finality provider has been jailed
    bool jailed = 6;
}

// BTCDelegation defines a BTC delegation
message BTCDelegation {
    // staker_addr is the address to receive rewards from BTC delegation.
    string staker_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 2 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // pop is the proof of possession of babylon_pk and btc_pk
    ProofOfPossessionBTC pop = 3;
    // fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
    // this BTC delegation delegates to
    // If there is more than 1 PKs, then this means the delegation is restaked
    // to multiple finality providers
    repeated bytes fp_btc_pk_list = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // start_height is the start BTC height of the BTC delegation
    // it is the start BTC height of the timelock
    uint64 start_height = 5;
    // end_height is the end height of the BTC delegation
    // it is the end BTC height of the timelock - w
    uint64 end_height = 6;
    // total_sat is the total amount of BTC stakes in this delegation
    // quantified in satoshi
    uint64 total_sat = 7;
    // staking_tx is the staking tx
    bytes staking_tx  = 8;
    // staking_output_idx is the index of the staking output in the staking tx
    uint32 staking_output_idx = 9;
    // slashing_tx is the slashing tx
    // It is partially signed by SK corresponding to btc_pk, but not signed by
    // finality provider or covenant yet.
    bytes slashing_tx = 10 [ (gogoproto.customtype) = "BTCSlashingTx" ];
    // delegator_sig is the signature on the slashing tx
    // by the delegator (i.e., SK corresponding to btc_pk).
    // It will be a part of the witness for the staking tx output.
    bytes delegator_sig = 11 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // covenant_sigs is a list of adaptor signatures on the slashing tx
    // by each covenant member
    // It will be a part of the witness for the staking tx output.
    repeated CovenantAdaptorSignatures covenant_sigs = 12;
    // unbonding_time describes how long the funds will be locked either in unbonding output
    // or slashing change output
    uint32 unbonding_time = 13;
    // btc_undelegation is the information about the early unbonding path of the BTC delegation
    BTCUndelegation btc_undelegation = 14;
    // version of the params used to validate the delegation
    uint32 params_version = 15;
}

// BTCUndelegation contains the information about the early unbonding path of the BTC delegation
message BTCUndelegation {
    // unbonding_tx is the transaction which will transfer the funds from staking
    // output to unbonding output. Unbonding output will usually have lower timelock
    // than staking output.
    bytes unbonding_tx = 1;
    // slashing_tx is the slashing tx for unbonding transactions
    // It is partially signed by SK corresponding to btc_pk, but not signed by
    // finality provider or covenant yet.
    bytes slashing_tx = 2 [ (gogoproto.customtype) = "BTCSlashingTx" ];
    // delegator_unbonding_sig is the signature on the unbonding tx
    // by the delegator (i.e., SK corresponding to btc_pk).
    // It effectively proves that the delegator wants to unbond and thus
    // Babylon will consider this BTC delegation unbonded. Delegator's BTC
    // on Bitcoin will be unbonded after timelock
    bytes delegator_unbonding_sig = 3 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // delegator_slashing_sig is the signature on the slashing tx
    // by the delegator (i.e., SK corresponding to btc_pk).
    // It will be a part of the witness for the unbonding tx output.
    bytes delegator_slashing_sig = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
    // by each covenant member
    // It will be a part of the witness for the staking tx output.
    repeated CovenantAdaptorSignatures covenant_slashing_sigs = 5;
    // covenant_unbonding_sig_list is the list of signatures on the unbonding tx
    // by covenant members
    // It must be provided after processing undelegate message by Babylon
    repeated SignatureInfo covenant_unbonding_sig_list = 6;
}

// BTCDelegatorDelegations is a collection of BTC delegations from the same delegator.
message BTCDelegatorDelegations {
    repeated BTCDelegation dels = 1;
}

// BTCDelegatorDelegationIndex is a list of staking tx hashes of BTC delegations from the same delegator.
message BTCDelegatorDelegationIndex {
    repeated bytes staking_tx_hash_list = 1;
}

// BTCDelegationStatus is the status of a delegation. The state transition path is
// PENDING -> ACTIVE -> UNBONDED with two possibilities:
// 1. the typical path when timelock of staking transaction expires.
// 2. the path when staker requests early undelegation through MsgBTCUndelegate message.
enum BTCDelegationStatus {
    // PENDING defines a delegation that is waiting for covenant signatures to become active.
    PENDING = 0;
    // ACTIVE defines a delegation that has voting power
    ACTIVE = 1;
    // UNBONDED defines a delegation no longer has voting power:
    // - either reaching the end of staking transaction timelock
    // - or receiving unbonding tx with signatures from staker and covenant committee
    UNBONDED = 2;
    // ANY is any of the above status
    ANY = 3;
}

// SignatureInfo is a BIP-340 signature together with its signer's BIP-340 PK
message SignatureInfo {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    bytes sig = 2 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
}

// CovenantAdaptorSignatures is a list adaptor signatures signed by the
// covenant with different finality provider's public keys as encryption keys
message CovenantAdaptorSignatures {
    // cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature
    bytes cov_pk = 1 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
    repeated bytes adaptor_sigs = 2;
}

// SelectiveSlashingEvidence is the evidence that the finality provider
// selectively slashed a BTC delegation
// NOTE: it's possible that a slashed finality provider exploits the
// SelectiveSlashingEvidence endpoint while it is actually slashed due to
// equivocation. But such behaviour does not affect the system's security
// or gives any benefit for the adversary
message SelectiveSlashingEvidence {
    // staking_tx_hash is the hash of the staking tx.
    // It uniquely identifies a BTC delegation
    string staking_tx_hash = 1;
    // fp_btc_pk is the BTC PK of the finality provider who
    // launches the selective slashing offence
    bytes fp_btc_pk = 2 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // recovered_fp_btc_sk is the finality provider's BTC SK recovered from
    // the covenant adaptor/Schnorr signature pair. It is the consequence
    // of selective slashing.
    bytes recovered_fp_btc_sk = 3;
  }
