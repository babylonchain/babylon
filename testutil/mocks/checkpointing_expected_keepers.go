// Code generated by MockGen. DO NOT EDIT.
// Source: x/checkpointing/types/expected_keepers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/babylonchain/babylon/x/checkpointing/types"
	types0 "github.com/babylonchain/babylon/x/epoching/types"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/x/staking/types"
	gomock "github.com/golang/mock/gomock"
)

// MockEpochingKeeper is a mock of EpochingKeeper interface.
type MockEpochingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEpochingKeeperMockRecorder
}

// MockEpochingKeeperMockRecorder is the mock recorder for MockEpochingKeeper.
type MockEpochingKeeperMockRecorder struct {
	mock *MockEpochingKeeper
}

// NewMockEpochingKeeper creates a new mock instance.
func NewMockEpochingKeeper(ctrl *gomock.Controller) *MockEpochingKeeper {
	mock := &MockEpochingKeeper{ctrl: ctrl}
	mock.recorder = &MockEpochingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpochingKeeper) EXPECT() *MockEpochingKeeperMockRecorder {
	return m.recorder
}

// CheckMsgCreateValidator mocks base method.
func (m *MockEpochingKeeper) CheckMsgCreateValidator(ctx context.Context, msg *types2.MsgCreateValidator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMsgCreateValidator", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckMsgCreateValidator indicates an expected call of CheckMsgCreateValidator.
func (mr *MockEpochingKeeperMockRecorder) CheckMsgCreateValidator(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMsgCreateValidator", reflect.TypeOf((*MockEpochingKeeper)(nil).CheckMsgCreateValidator), ctx, msg)
}

// EnqueueMsg mocks base method.
func (m *MockEpochingKeeper) EnqueueMsg(ctx context.Context, msg types0.QueuedMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueMsg", ctx, msg)
}

// EnqueueMsg indicates an expected call of EnqueueMsg.
func (mr *MockEpochingKeeperMockRecorder) EnqueueMsg(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueMsg", reflect.TypeOf((*MockEpochingKeeper)(nil).EnqueueMsg), ctx, msg)
}

// GetEpoch mocks base method.
func (m *MockEpochingKeeper) GetEpoch(ctx context.Context) *types0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpoch", ctx)
	ret0, _ := ret[0].(*types0.Epoch)
	return ret0
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockEpochingKeeperMockRecorder) GetEpoch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockEpochingKeeper)(nil).GetEpoch), ctx)
}

// GetPubKeyByConsAddr mocks base method.
func (m *MockEpochingKeeper) GetPubKeyByConsAddr(ctx context.Context, consAddr types1.ConsAddress) (crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubKeyByConsAddr", ctx, consAddr)
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubKeyByConsAddr indicates an expected call of GetPubKeyByConsAddr.
func (mr *MockEpochingKeeperMockRecorder) GetPubKeyByConsAddr(ctx, consAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubKeyByConsAddr", reflect.TypeOf((*MockEpochingKeeper)(nil).GetPubKeyByConsAddr), ctx, consAddr)
}

// GetTotalVotingPower mocks base method.
func (m *MockEpochingKeeper) GetTotalVotingPower(ctx context.Context, epochNumber uint64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalVotingPower", ctx, epochNumber)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTotalVotingPower indicates an expected call of GetTotalVotingPower.
func (mr *MockEpochingKeeperMockRecorder) GetTotalVotingPower(ctx, epochNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalVotingPower", reflect.TypeOf((*MockEpochingKeeper)(nil).GetTotalVotingPower), ctx, epochNumber)
}

// GetValidatorSet mocks base method.
func (m *MockEpochingKeeper) GetValidatorSet(ctx context.Context, epochNumer uint64) types0.ValidatorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet", ctx, epochNumer)
	ret0, _ := ret[0].(types0.ValidatorSet)
	return ret0
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockEpochingKeeperMockRecorder) GetValidatorSet(ctx, epochNumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockEpochingKeeper)(nil).GetValidatorSet), ctx, epochNumer)
}

// MockCheckpointingHooks is a mock of CheckpointingHooks interface.
type MockCheckpointingHooks struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointingHooksMockRecorder
}

// MockCheckpointingHooksMockRecorder is the mock recorder for MockCheckpointingHooks.
type MockCheckpointingHooksMockRecorder struct {
	mock *MockCheckpointingHooks
}

// NewMockCheckpointingHooks creates a new mock instance.
func NewMockCheckpointingHooks(ctrl *gomock.Controller) *MockCheckpointingHooks {
	mock := &MockCheckpointingHooks{ctrl: ctrl}
	mock.recorder = &MockCheckpointingHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointingHooks) EXPECT() *MockCheckpointingHooksMockRecorder {
	return m.recorder
}

// AfterBlsKeyRegistered mocks base method.
func (m *MockCheckpointingHooks) AfterBlsKeyRegistered(ctx context.Context, valAddr types1.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBlsKeyRegistered", ctx, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterBlsKeyRegistered indicates an expected call of AfterBlsKeyRegistered.
func (mr *MockCheckpointingHooksMockRecorder) AfterBlsKeyRegistered(ctx, valAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBlsKeyRegistered", reflect.TypeOf((*MockCheckpointingHooks)(nil).AfterBlsKeyRegistered), ctx, valAddr)
}

// AfterRawCheckpointBlsSigVerified mocks base method.
func (m *MockCheckpointingHooks) AfterRawCheckpointBlsSigVerified(ctx context.Context, ckpt *types.RawCheckpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterRawCheckpointBlsSigVerified", ctx, ckpt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterRawCheckpointBlsSigVerified indicates an expected call of AfterRawCheckpointBlsSigVerified.
func (mr *MockCheckpointingHooksMockRecorder) AfterRawCheckpointBlsSigVerified(ctx, ckpt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRawCheckpointBlsSigVerified", reflect.TypeOf((*MockCheckpointingHooks)(nil).AfterRawCheckpointBlsSigVerified), ctx, ckpt)
}

// AfterRawCheckpointConfirmed mocks base method.
func (m *MockCheckpointingHooks) AfterRawCheckpointConfirmed(ctx context.Context, epoch uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterRawCheckpointConfirmed", ctx, epoch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterRawCheckpointConfirmed indicates an expected call of AfterRawCheckpointConfirmed.
func (mr *MockCheckpointingHooksMockRecorder) AfterRawCheckpointConfirmed(ctx, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRawCheckpointConfirmed", reflect.TypeOf((*MockCheckpointingHooks)(nil).AfterRawCheckpointConfirmed), ctx, epoch)
}

// AfterRawCheckpointFinalized mocks base method.
func (m *MockCheckpointingHooks) AfterRawCheckpointFinalized(ctx context.Context, epoch uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterRawCheckpointFinalized", ctx, epoch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterRawCheckpointFinalized indicates an expected call of AfterRawCheckpointFinalized.
func (mr *MockCheckpointingHooksMockRecorder) AfterRawCheckpointFinalized(ctx, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRawCheckpointFinalized", reflect.TypeOf((*MockCheckpointingHooks)(nil).AfterRawCheckpointFinalized), ctx, epoch)
}

// AfterRawCheckpointForgotten mocks base method.
func (m *MockCheckpointingHooks) AfterRawCheckpointForgotten(ctx context.Context, ckpt *types.RawCheckpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterRawCheckpointForgotten", ctx, ckpt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterRawCheckpointForgotten indicates an expected call of AfterRawCheckpointForgotten.
func (mr *MockCheckpointingHooksMockRecorder) AfterRawCheckpointForgotten(ctx, ckpt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRawCheckpointForgotten", reflect.TypeOf((*MockCheckpointingHooks)(nil).AfterRawCheckpointForgotten), ctx, ckpt)
}

// AfterRawCheckpointSealed mocks base method.
func (m *MockCheckpointingHooks) AfterRawCheckpointSealed(ctx context.Context, epoch uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterRawCheckpointSealed", ctx, epoch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterRawCheckpointSealed indicates an expected call of AfterRawCheckpointSealed.
func (mr *MockCheckpointingHooksMockRecorder) AfterRawCheckpointSealed(ctx, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRawCheckpointSealed", reflect.TypeOf((*MockCheckpointingHooks)(nil).AfterRawCheckpointSealed), ctx, epoch)
}
