// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/btcstaking.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_babylonchain_babylon_types "github.com/babylonchain/babylon/types"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BTCDelegationStatus is the status of a delegation. The state transition path is
// PENDING -> ACTIVE -> UNBONDED with two possibilities:
// 1. the typical path when timelock of staking transaction expires.
// 2. the path when staker requests early undelegation through MsgBTCUndelegate message.
type BTCDelegationStatus int32

const (
	// PENDING defines a delegation that is waiting for covenant signatures to become active.
	BTCDelegationStatus_PENDING BTCDelegationStatus = 0
	// ACTIVE defines a delegation that has voting power
	BTCDelegationStatus_ACTIVE BTCDelegationStatus = 1
	// UNBONDED defines a delegation no longer has voting power:
	// - either reaching the end of staking transaction timelock
	// - or receiving unbonding tx with signatures from staker and covenant committee
	BTCDelegationStatus_UNBONDED BTCDelegationStatus = 2
	// ANY is any of the above status
	BTCDelegationStatus_ANY BTCDelegationStatus = 3
)

var BTCDelegationStatus_name = map[int32]string{
	0: "PENDING",
	1: "ACTIVE",
	2: "UNBONDED",
	3: "ANY",
}

var BTCDelegationStatus_value = map[string]int32{
	"PENDING":  0,
	"ACTIVE":   1,
	"UNBONDED": 2,
	"ANY":      3,
}

func (x BTCDelegationStatus) String() string {
	return proto.EnumName(BTCDelegationStatus_name, int32(x))
}

func (BTCDelegationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{0}
}

// FinalityProvider defines a finality provider
type FinalityProvider struct {
	// addr is the bech32 address identifier of the finality provider.
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// description defines the description terms for the finality provider.
	Description *types.Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate of the finality provider.
	Commission *cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=commission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission,omitempty"`
	// btc_pk is the Bitcoin secp256k1 PK of this finality provider
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,4,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// pop is the proof of possession of the btc_pk, where the BTC
	// private key signs the bech32 bbn addr of the finality provider.
	Pop *ProofOfPossessionBTC `protobuf:"bytes,5,opt,name=pop,proto3" json:"pop,omitempty"`
	// slashed_babylon_height indicates the Babylon height when
	// the finality provider is slashed.
	// if it's 0 then the finality provider is not slashed
	SlashedBabylonHeight uint64 `protobuf:"varint,6,opt,name=slashed_babylon_height,json=slashedBabylonHeight,proto3" json:"slashed_babylon_height,omitempty"`
	// slashed_btc_height indicates the BTC height when
	// the finality provider is slashed.
	// if it's 0 then the finality provider is not slashed
	SlashedBtcHeight uint64 `protobuf:"varint,7,opt,name=slashed_btc_height,json=slashedBtcHeight,proto3" json:"slashed_btc_height,omitempty"`
	// inactive defines whether the finality provider is detected inactive
	Inactive bool `protobuf:"varint,8,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (m *FinalityProvider) Reset()         { *m = FinalityProvider{} }
func (m *FinalityProvider) String() string { return proto.CompactTextString(m) }
func (*FinalityProvider) ProtoMessage()    {}
func (*FinalityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{0}
}
func (m *FinalityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProvider.Merge(m, src)
}
func (m *FinalityProvider) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProvider proto.InternalMessageInfo

func (m *FinalityProvider) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *FinalityProvider) GetDescription() *types.Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *FinalityProvider) GetPop() *ProofOfPossessionBTC {
	if m != nil {
		return m.Pop
	}
	return nil
}

func (m *FinalityProvider) GetSlashedBabylonHeight() uint64 {
	if m != nil {
		return m.SlashedBabylonHeight
	}
	return 0
}

func (m *FinalityProvider) GetSlashedBtcHeight() uint64 {
	if m != nil {
		return m.SlashedBtcHeight
	}
	return 0
}

func (m *FinalityProvider) GetInactive() bool {
	if m != nil {
		return m.Inactive
	}
	return false
}

// FinalityProviderWithMeta wraps the FinalityProvider with metadata.
type FinalityProviderWithMeta struct {
	// btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// height is the queried Babylon height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// voting_power is the voting power of this finality provider at the given height
	VotingPower uint64 `protobuf:"varint,3,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	// slashed_babylon_height indicates the Babylon height when
	// the finality provider is slashed.
	// if it's 0 then the finality provider is not slashed
	SlashedBabylonHeight uint64 `protobuf:"varint,4,opt,name=slashed_babylon_height,json=slashedBabylonHeight,proto3" json:"slashed_babylon_height,omitempty"`
	// slashed_btc_height indicates the BTC height when
	// the finality provider is slashed.
	// if it's 0 then the finality provider is not slashed
	SlashedBtcHeight uint64 `protobuf:"varint,5,opt,name=slashed_btc_height,json=slashedBtcHeight,proto3" json:"slashed_btc_height,omitempty"`
	// inactive defines whether the finality provider is detected inactive
	Inactive bool `protobuf:"varint,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (m *FinalityProviderWithMeta) Reset()         { *m = FinalityProviderWithMeta{} }
func (m *FinalityProviderWithMeta) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderWithMeta) ProtoMessage()    {}
func (*FinalityProviderWithMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{1}
}
func (m *FinalityProviderWithMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderWithMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderWithMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderWithMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderWithMeta.Merge(m, src)
}
func (m *FinalityProviderWithMeta) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderWithMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderWithMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderWithMeta proto.InternalMessageInfo

func (m *FinalityProviderWithMeta) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *FinalityProviderWithMeta) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *FinalityProviderWithMeta) GetSlashedBabylonHeight() uint64 {
	if m != nil {
		return m.SlashedBabylonHeight
	}
	return 0
}

func (m *FinalityProviderWithMeta) GetSlashedBtcHeight() uint64 {
	if m != nil {
		return m.SlashedBtcHeight
	}
	return 0
}

func (m *FinalityProviderWithMeta) GetInactive() bool {
	if m != nil {
		return m.Inactive
	}
	return false
}

// BTCDelegation defines a BTC delegation
type BTCDelegation struct {
	// staker_addr is the address to receive rewards from BTC delegation.
	StakerAddr string `protobuf:"bytes,1,opt,name=staker_addr,json=stakerAddr,proto3" json:"staker_addr,omitempty"`
	// btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,2,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// pop is the proof of possession of babylon_pk and btc_pk
	Pop *ProofOfPossessionBTC `protobuf:"bytes,3,opt,name=pop,proto3" json:"pop,omitempty"`
	// fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
	// this BTC delegation delegates to
	// If there is more than 1 PKs, then this means the delegation is restaked
	// to multiple finality providers
	FpBtcPkList []github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,4,rep,name=fp_btc_pk_list,json=fpBtcPkList,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"fp_btc_pk_list,omitempty"`
	// start_height is the start BTC height of the BTC delegation
	// it is the start BTC height of the timelock
	StartHeight uint64 `protobuf:"varint,5,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// end_height is the end height of the BTC delegation
	// it is the end BTC height of the timelock - w
	EndHeight uint64 `protobuf:"varint,6,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// total_sat is the total amount of BTC stakes in this delegation
	// quantified in satoshi
	TotalSat uint64 `protobuf:"varint,7,opt,name=total_sat,json=totalSat,proto3" json:"total_sat,omitempty"`
	// staking_tx is the staking tx
	StakingTx []byte `protobuf:"bytes,8,opt,name=staking_tx,json=stakingTx,proto3" json:"staking_tx,omitempty"`
	// staking_output_idx is the index of the staking output in the staking tx
	StakingOutputIdx uint32 `protobuf:"varint,9,opt,name=staking_output_idx,json=stakingOutputIdx,proto3" json:"staking_output_idx,omitempty"`
	// slashing_tx is the slashing tx
	// It is partially signed by SK corresponding to btc_pk, but not signed by
	// finality provider or covenant yet.
	SlashingTx *BTCSlashingTx `protobuf:"bytes,10,opt,name=slashing_tx,json=slashingTx,proto3,customtype=BTCSlashingTx" json:"slashing_tx,omitempty"`
	// delegator_sig is the signature on the slashing tx
	// by the delegator (i.e., SK corresponding to btc_pk).
	// It will be a part of the witness for the staking tx output.
	DelegatorSig *github_com_babylonchain_babylon_types.BIP340Signature `protobuf:"bytes,11,opt,name=delegator_sig,json=delegatorSig,proto3,customtype=github.com/babylonchain/babylon/types.BIP340Signature" json:"delegator_sig,omitempty"`
	// covenant_sigs is a list of adaptor signatures on the slashing tx
	// by each covenant member
	// It will be a part of the witness for the staking tx output.
	CovenantSigs []*CovenantAdaptorSignatures `protobuf:"bytes,12,rep,name=covenant_sigs,json=covenantSigs,proto3" json:"covenant_sigs,omitempty"`
	// unbonding_time describes how long the funds will be locked either in unbonding output
	// or slashing change output
	UnbondingTime uint32 `protobuf:"varint,13,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	// btc_undelegation is the information about the early unbonding path of the BTC delegation
	BtcUndelegation *BTCUndelegation `protobuf:"bytes,14,opt,name=btc_undelegation,json=btcUndelegation,proto3" json:"btc_undelegation,omitempty"`
	// version of the params used to validate the delegation
	ParamsVersion uint32 `protobuf:"varint,15,opt,name=params_version,json=paramsVersion,proto3" json:"params_version,omitempty"`
}

func (m *BTCDelegation) Reset()         { *m = BTCDelegation{} }
func (m *BTCDelegation) String() string { return proto.CompactTextString(m) }
func (*BTCDelegation) ProtoMessage()    {}
func (*BTCDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{2}
}
func (m *BTCDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegation.Merge(m, src)
}
func (m *BTCDelegation) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegation proto.InternalMessageInfo

func (m *BTCDelegation) GetStakerAddr() string {
	if m != nil {
		return m.StakerAddr
	}
	return ""
}

func (m *BTCDelegation) GetPop() *ProofOfPossessionBTC {
	if m != nil {
		return m.Pop
	}
	return nil
}

func (m *BTCDelegation) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *BTCDelegation) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *BTCDelegation) GetTotalSat() uint64 {
	if m != nil {
		return m.TotalSat
	}
	return 0
}

func (m *BTCDelegation) GetStakingTx() []byte {
	if m != nil {
		return m.StakingTx
	}
	return nil
}

func (m *BTCDelegation) GetStakingOutputIdx() uint32 {
	if m != nil {
		return m.StakingOutputIdx
	}
	return 0
}

func (m *BTCDelegation) GetCovenantSigs() []*CovenantAdaptorSignatures {
	if m != nil {
		return m.CovenantSigs
	}
	return nil
}

func (m *BTCDelegation) GetUnbondingTime() uint32 {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *BTCDelegation) GetBtcUndelegation() *BTCUndelegation {
	if m != nil {
		return m.BtcUndelegation
	}
	return nil
}

func (m *BTCDelegation) GetParamsVersion() uint32 {
	if m != nil {
		return m.ParamsVersion
	}
	return 0
}

// BTCUndelegation contains the information about the early unbonding path of the BTC delegation
type BTCUndelegation struct {
	// unbonding_tx is the transaction which will transfer the funds from staking
	// output to unbonding output. Unbonding output will usually have lower timelock
	// than staking output.
	UnbondingTx []byte `protobuf:"bytes,1,opt,name=unbonding_tx,json=unbondingTx,proto3" json:"unbonding_tx,omitempty"`
	// slashing_tx is the slashing tx for unbonding transactions
	// It is partially signed by SK corresponding to btc_pk, but not signed by
	// finality provider or covenant yet.
	SlashingTx *BTCSlashingTx `protobuf:"bytes,2,opt,name=slashing_tx,json=slashingTx,proto3,customtype=BTCSlashingTx" json:"slashing_tx,omitempty"`
	// delegator_unbonding_sig is the signature on the unbonding tx
	// by the delegator (i.e., SK corresponding to btc_pk).
	// It effectively proves that the delegator wants to unbond and thus
	// Babylon will consider this BTC delegation unbonded. Delegator's BTC
	// on Bitcoin will be unbonded after timelock
	DelegatorUnbondingSig *github_com_babylonchain_babylon_types.BIP340Signature `protobuf:"bytes,3,opt,name=delegator_unbonding_sig,json=delegatorUnbondingSig,proto3,customtype=github.com/babylonchain/babylon/types.BIP340Signature" json:"delegator_unbonding_sig,omitempty"`
	// delegator_slashing_sig is the signature on the slashing tx
	// by the delegator (i.e., SK corresponding to btc_pk).
	// It will be a part of the witness for the unbonding tx output.
	DelegatorSlashingSig *github_com_babylonchain_babylon_types.BIP340Signature `protobuf:"bytes,4,opt,name=delegator_slashing_sig,json=delegatorSlashingSig,proto3,customtype=github.com/babylonchain/babylon/types.BIP340Signature" json:"delegator_slashing_sig,omitempty"`
	// covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
	// by each covenant member
	// It will be a part of the witness for the staking tx output.
	CovenantSlashingSigs []*CovenantAdaptorSignatures `protobuf:"bytes,5,rep,name=covenant_slashing_sigs,json=covenantSlashingSigs,proto3" json:"covenant_slashing_sigs,omitempty"`
	// covenant_unbonding_sig_list is the list of signatures on the unbonding tx
	// by covenant members
	// It must be provided after processing undelegate message by Babylon
	CovenantUnbondingSigList []*SignatureInfo `protobuf:"bytes,6,rep,name=covenant_unbonding_sig_list,json=covenantUnbondingSigList,proto3" json:"covenant_unbonding_sig_list,omitempty"`
}

func (m *BTCUndelegation) Reset()         { *m = BTCUndelegation{} }
func (m *BTCUndelegation) String() string { return proto.CompactTextString(m) }
func (*BTCUndelegation) ProtoMessage()    {}
func (*BTCUndelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{3}
}
func (m *BTCUndelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCUndelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCUndelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCUndelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCUndelegation.Merge(m, src)
}
func (m *BTCUndelegation) XXX_Size() int {
	return m.Size()
}
func (m *BTCUndelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCUndelegation.DiscardUnknown(m)
}

var xxx_messageInfo_BTCUndelegation proto.InternalMessageInfo

func (m *BTCUndelegation) GetUnbondingTx() []byte {
	if m != nil {
		return m.UnbondingTx
	}
	return nil
}

func (m *BTCUndelegation) GetCovenantSlashingSigs() []*CovenantAdaptorSignatures {
	if m != nil {
		return m.CovenantSlashingSigs
	}
	return nil
}

func (m *BTCUndelegation) GetCovenantUnbondingSigList() []*SignatureInfo {
	if m != nil {
		return m.CovenantUnbondingSigList
	}
	return nil
}

// BTCDelegatorDelegations is a collection of BTC delegations from the same delegator.
type BTCDelegatorDelegations struct {
	Dels []*BTCDelegation `protobuf:"bytes,1,rep,name=dels,proto3" json:"dels,omitempty"`
}

func (m *BTCDelegatorDelegations) Reset()         { *m = BTCDelegatorDelegations{} }
func (m *BTCDelegatorDelegations) String() string { return proto.CompactTextString(m) }
func (*BTCDelegatorDelegations) ProtoMessage()    {}
func (*BTCDelegatorDelegations) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{4}
}
func (m *BTCDelegatorDelegations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegatorDelegations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegatorDelegations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegatorDelegations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegatorDelegations.Merge(m, src)
}
func (m *BTCDelegatorDelegations) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegatorDelegations) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegatorDelegations.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegatorDelegations proto.InternalMessageInfo

func (m *BTCDelegatorDelegations) GetDels() []*BTCDelegation {
	if m != nil {
		return m.Dels
	}
	return nil
}

// BTCDelegatorDelegationIndex is a list of staking tx hashes of BTC delegations from the same delegator.
type BTCDelegatorDelegationIndex struct {
	StakingTxHashList [][]byte `protobuf:"bytes,1,rep,name=staking_tx_hash_list,json=stakingTxHashList,proto3" json:"staking_tx_hash_list,omitempty"`
}

func (m *BTCDelegatorDelegationIndex) Reset()         { *m = BTCDelegatorDelegationIndex{} }
func (m *BTCDelegatorDelegationIndex) String() string { return proto.CompactTextString(m) }
func (*BTCDelegatorDelegationIndex) ProtoMessage()    {}
func (*BTCDelegatorDelegationIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{5}
}
func (m *BTCDelegatorDelegationIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegatorDelegationIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegatorDelegationIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegatorDelegationIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegatorDelegationIndex.Merge(m, src)
}
func (m *BTCDelegatorDelegationIndex) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegatorDelegationIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegatorDelegationIndex.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegatorDelegationIndex proto.InternalMessageInfo

func (m *BTCDelegatorDelegationIndex) GetStakingTxHashList() [][]byte {
	if m != nil {
		return m.StakingTxHashList
	}
	return nil
}

// SignatureInfo is a BIP-340 signature together with its signer's BIP-340 PK
type SignatureInfo struct {
	Pk  *github_com_babylonchain_babylon_types.BIP340PubKey    `protobuf:"bytes,1,opt,name=pk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"pk,omitempty"`
	Sig *github_com_babylonchain_babylon_types.BIP340Signature `protobuf:"bytes,2,opt,name=sig,proto3,customtype=github.com/babylonchain/babylon/types.BIP340Signature" json:"sig,omitempty"`
}

func (m *SignatureInfo) Reset()         { *m = SignatureInfo{} }
func (m *SignatureInfo) String() string { return proto.CompactTextString(m) }
func (*SignatureInfo) ProtoMessage()    {}
func (*SignatureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{6}
}
func (m *SignatureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureInfo.Merge(m, src)
}
func (m *SignatureInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignatureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureInfo proto.InternalMessageInfo

// CovenantAdaptorSignatures is a list adaptor signatures signed by the
// covenant with different finality provider's public keys as encryption keys
type CovenantAdaptorSignatures struct {
	// cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature
	CovPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=cov_pk,json=covPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"cov_pk,omitempty"`
	// adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
	AdaptorSigs [][]byte `protobuf:"bytes,2,rep,name=adaptor_sigs,json=adaptorSigs,proto3" json:"adaptor_sigs,omitempty"`
}

func (m *CovenantAdaptorSignatures) Reset()         { *m = CovenantAdaptorSignatures{} }
func (m *CovenantAdaptorSignatures) String() string { return proto.CompactTextString(m) }
func (*CovenantAdaptorSignatures) ProtoMessage()    {}
func (*CovenantAdaptorSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{7}
}
func (m *CovenantAdaptorSignatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CovenantAdaptorSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CovenantAdaptorSignatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CovenantAdaptorSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CovenantAdaptorSignatures.Merge(m, src)
}
func (m *CovenantAdaptorSignatures) XXX_Size() int {
	return m.Size()
}
func (m *CovenantAdaptorSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_CovenantAdaptorSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_CovenantAdaptorSignatures proto.InternalMessageInfo

func (m *CovenantAdaptorSignatures) GetAdaptorSigs() [][]byte {
	if m != nil {
		return m.AdaptorSigs
	}
	return nil
}

// SelectiveSlashingEvidence is the evidence that the finality provider
// selectively slashed a BTC delegation
// NOTE: it's possible that a slashed finality provider exploits the
// SelectiveSlashingEvidence endpoint while it is actually slashed due to
// equivocation. But such behaviour does not affect the system's security
// or gives any benefit for the adversary
type SelectiveSlashingEvidence struct {
	// staking_tx_hash is the hash of the staking tx.
	// It uniquely identifies a BTC delegation
	StakingTxHash string `protobuf:"bytes,1,opt,name=staking_tx_hash,json=stakingTxHash,proto3" json:"staking_tx_hash,omitempty"`
	// fp_btc_pk is the BTC PK of the finality provider who
	// launches the selective slashing offence
	FpBtcPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,2,opt,name=fp_btc_pk,json=fpBtcPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"fp_btc_pk,omitempty"`
	// recovered_fp_btc_sk is the finality provider's BTC SK recovered from
	// the covenant adaptor/Schnorr signature pair. It is the consequence
	// of selective slashing.
	RecoveredFpBtcSk []byte `protobuf:"bytes,3,opt,name=recovered_fp_btc_sk,json=recoveredFpBtcSk,proto3" json:"recovered_fp_btc_sk,omitempty"`
}

func (m *SelectiveSlashingEvidence) Reset()         { *m = SelectiveSlashingEvidence{} }
func (m *SelectiveSlashingEvidence) String() string { return proto.CompactTextString(m) }
func (*SelectiveSlashingEvidence) ProtoMessage()    {}
func (*SelectiveSlashingEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_3851ae95ccfaf7db, []int{8}
}
func (m *SelectiveSlashingEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectiveSlashingEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectiveSlashingEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectiveSlashingEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectiveSlashingEvidence.Merge(m, src)
}
func (m *SelectiveSlashingEvidence) XXX_Size() int {
	return m.Size()
}
func (m *SelectiveSlashingEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectiveSlashingEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_SelectiveSlashingEvidence proto.InternalMessageInfo

func (m *SelectiveSlashingEvidence) GetStakingTxHash() string {
	if m != nil {
		return m.StakingTxHash
	}
	return ""
}

func (m *SelectiveSlashingEvidence) GetRecoveredFpBtcSk() []byte {
	if m != nil {
		return m.RecoveredFpBtcSk
	}
	return nil
}

func init() {
	proto.RegisterEnum("babylon.btcstaking.v1.BTCDelegationStatus", BTCDelegationStatus_name, BTCDelegationStatus_value)
	proto.RegisterType((*FinalityProvider)(nil), "babylon.btcstaking.v1.FinalityProvider")
	proto.RegisterType((*FinalityProviderWithMeta)(nil), "babylon.btcstaking.v1.FinalityProviderWithMeta")
	proto.RegisterType((*BTCDelegation)(nil), "babylon.btcstaking.v1.BTCDelegation")
	proto.RegisterType((*BTCUndelegation)(nil), "babylon.btcstaking.v1.BTCUndelegation")
	proto.RegisterType((*BTCDelegatorDelegations)(nil), "babylon.btcstaking.v1.BTCDelegatorDelegations")
	proto.RegisterType((*BTCDelegatorDelegationIndex)(nil), "babylon.btcstaking.v1.BTCDelegatorDelegationIndex")
	proto.RegisterType((*SignatureInfo)(nil), "babylon.btcstaking.v1.SignatureInfo")
	proto.RegisterType((*CovenantAdaptorSignatures)(nil), "babylon.btcstaking.v1.CovenantAdaptorSignatures")
	proto.RegisterType((*SelectiveSlashingEvidence)(nil), "babylon.btcstaking.v1.SelectiveSlashingEvidence")
}

func init() {
	proto.RegisterFile("babylon/btcstaking/v1/btcstaking.proto", fileDescriptor_3851ae95ccfaf7db)
}

var fileDescriptor_3851ae95ccfaf7db = []byte{
	// 1209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0x13, 0xc7,
	0x1b, 0xce, 0xda, 0x8e, 0x93, 0xbc, 0xb6, 0x89, 0x19, 0x42, 0x58, 0x12, 0xfd, 0x12, 0xff, 0x5c,
	0x8a, 0xac, 0x96, 0xd8, 0x10, 0x68, 0x55, 0x0e, 0x3d, 0xc4, 0x71, 0x28, 0x11, 0x10, 0xdc, 0xb5,
	0x43, 0xd5, 0x56, 0xea, 0x6a, 0xbc, 0x3b, 0x59, 0x8f, 0x6c, 0xef, 0x6c, 0x77, 0xc6, 0xae, 0xf3,
	0x21, 0x2a, 0xf5, 0xda, 0x3b, 0x1f, 0x81, 0xcf, 0x50, 0xf5, 0x88, 0x38, 0x55, 0x39, 0x44, 0x15,
	0xf4, 0xda, 0xef, 0x50, 0xcd, 0xec, 0x7a, 0x77, 0x9d, 0x12, 0x0a, 0x98, 0x9b, 0xe7, 0xfd, 0xf7,
	0xbc, 0xf3, 0x3e, 0x8f, 0xdf, 0x59, 0xb8, 0xde, 0xc1, 0x9d, 0xe3, 0x3e, 0x73, 0x6b, 0x1d, 0x61,
	0x71, 0x81, 0x7b, 0xd4, 0x75, 0x6a, 0xa3, 0x5b, 0x89, 0x53, 0xd5, 0xf3, 0x99, 0x60, 0xe8, 0x72,
	0x18, 0x57, 0x4d, 0x78, 0x46, 0xb7, 0xd6, 0x56, 0x1c, 0xe6, 0x30, 0x15, 0x51, 0x93, 0xbf, 0x82,
	0xe0, 0xb5, 0xab, 0x16, 0xe3, 0x03, 0xc6, 0xcd, 0xc0, 0x11, 0x1c, 0x42, 0xd7, 0xb5, 0xe0, 0x54,
	0x8b, 0xb1, 0x3a, 0x44, 0xe0, 0x5b, 0xb5, 0x29, 0xb4, 0xb5, 0xcd, 0xd7, 0x77, 0xe5, 0x31, 0x2f,
	0x08, 0x28, 0xff, 0x95, 0x86, 0xe2, 0x3d, 0xea, 0xe2, 0x3e, 0x15, 0xc7, 0x4d, 0x9f, 0x8d, 0xa8,
	0x4d, 0x7c, 0x74, 0x03, 0x32, 0xd8, 0xb6, 0x7d, 0x5d, 0x2b, 0x69, 0x95, 0xa5, 0xba, 0xfe, 0xe2,
	0xd9, 0xd6, 0x4a, 0x88, 0xbd, 0x63, 0xdb, 0x3e, 0xe1, 0xbc, 0x25, 0x7c, 0xea, 0x3a, 0x86, 0x8a,
	0x42, 0x7b, 0x90, 0xb3, 0x09, 0xb7, 0x7c, 0xea, 0x09, 0xca, 0x5c, 0x3d, 0x55, 0xd2, 0x2a, 0xb9,
	0xed, 0x8f, 0xaa, 0x61, 0x46, 0x7c, 0x47, 0xd5, 0x5f, 0xb5, 0x11, 0x87, 0x1a, 0xc9, 0x3c, 0xf4,
	0x08, 0xc0, 0x62, 0x83, 0x01, 0xe5, 0x5c, 0x56, 0x49, 0x2b, 0xe8, 0xad, 0x93, 0xd3, 0xcd, 0xf5,
	0xa0, 0x10, 0xb7, 0x7b, 0x55, 0xca, 0x6a, 0x03, 0x2c, 0xba, 0xd5, 0x87, 0xc4, 0xc1, 0xd6, 0x71,
	0x83, 0x58, 0x2f, 0x9e, 0x6d, 0x41, 0x88, 0xd3, 0x20, 0x96, 0x91, 0x28, 0x80, 0x1e, 0x41, 0xb6,
	0x23, 0x2c, 0xd3, 0xeb, 0xe9, 0x99, 0x92, 0x56, 0xc9, 0xd7, 0x3f, 0x3f, 0x39, 0xdd, 0xdc, 0x76,
	0xa8, 0xe8, 0x0e, 0x3b, 0x55, 0x8b, 0x0d, 0x6a, 0xe1, 0x60, 0xac, 0x2e, 0xa6, 0xee, 0xe4, 0x50,
	0x13, 0xc7, 0x1e, 0xe1, 0xd5, 0xfa, 0x7e, 0xf3, 0xf6, 0x9d, 0x9b, 0xcd, 0x61, 0xe7, 0x01, 0x39,
	0x36, 0xe6, 0x3b, 0xc2, 0x6a, 0xf6, 0xd0, 0x97, 0x90, 0xf6, 0x98, 0xa7, 0xcf, 0xab, 0xcb, 0x7d,
	0x5a, 0x7d, 0x2d, 0x89, 0xd5, 0xa6, 0xcf, 0xd8, 0xd1, 0xe3, 0xa3, 0x26, 0xe3, 0x9c, 0xa8, 0x2e,
	0xea, 0xed, 0x5d, 0x43, 0xe6, 0xa1, 0x3b, 0xb0, 0xca, 0xfb, 0x98, 0x77, 0x89, 0x6d, 0x86, 0xa9,
	0x66, 0x97, 0x50, 0xa7, 0x2b, 0xf4, 0x6c, 0x49, 0xab, 0x64, 0x8c, 0x95, 0xd0, 0x5b, 0x0f, 0x9c,
	0xf7, 0x95, 0x0f, 0xdd, 0x00, 0x14, 0x65, 0x09, 0x6b, 0x92, 0xb1, 0xa0, 0x32, 0x8a, 0x93, 0x0c,
	0x61, 0x85, 0xd1, 0x6b, 0xb0, 0x48, 0x5d, 0x6c, 0x09, 0x3a, 0x22, 0xfa, 0x62, 0x49, 0xab, 0x2c,
	0x1a, 0xd1, 0xb9, 0xfc, 0x34, 0x05, 0xfa, 0x59, 0x9a, 0xbf, 0xa1, 0xa2, 0xfb, 0x88, 0x08, 0x9c,
	0x18, 0x95, 0xf6, 0x21, 0x46, 0xb5, 0x0a, 0xd9, 0xb0, 0xd3, 0x94, 0xea, 0x34, 0x3c, 0xa1, 0xff,
	0x43, 0x7e, 0xc4, 0x04, 0x75, 0x1d, 0xd3, 0x63, 0x3f, 0x11, 0x5f, 0x51, 0x9c, 0x31, 0x72, 0x81,
	0xad, 0x29, 0x4d, 0x6f, 0x18, 0x53, 0xe6, 0x9d, 0xc7, 0x34, 0xff, 0x16, 0x63, 0xca, 0x9e, 0x19,
	0xd3, 0xdf, 0x59, 0x28, 0xd4, 0xdb, 0xbb, 0x0d, 0xd2, 0x27, 0x0e, 0x56, 0xaa, 0xbc, 0x0b, 0x39,
	0x49, 0x30, 0xf1, 0xcd, 0xb7, 0xfa, 0x47, 0x40, 0x10, 0x2c, 0x8d, 0x89, 0xb1, 0xa6, 0x3e, 0xa0,
	0x02, 0xd3, 0xef, 0xa9, 0xc0, 0xef, 0xe1, 0xc2, 0x91, 0x67, 0x06, 0x0d, 0x99, 0x7d, 0xca, 0xe5,
	0x48, 0xd3, 0x33, 0x74, 0x95, 0x3b, 0xf2, 0xea, 0xb2, 0xaf, 0x87, 0x94, 0x2b, 0x6a, 0xb9, 0xc0,
	0xbe, 0x98, 0x9e, 0x7d, 0x4e, 0xd9, 0xc2, 0xb1, 0xff, 0x0f, 0x80, 0xb8, 0xf6, 0xb4, 0xea, 0x97,
	0x88, 0x6b, 0x87, 0xee, 0x75, 0x58, 0x12, 0x4c, 0xe0, 0xbe, 0xc9, 0xf1, 0x44, 0xe1, 0x8b, 0xca,
	0xd0, 0xc2, 0x2a, 0x37, 0xbc, 0xa3, 0x29, 0xc6, 0x4a, 0xdb, 0x79, 0x63, 0x29, 0xb4, 0xb4, 0xc7,
	0x8a, 0xff, 0xd0, 0xcd, 0x86, 0xc2, 0x1b, 0x0a, 0x93, 0xda, 0x63, 0x7d, 0xa9, 0xa4, 0x55, 0x0a,
	0x46, 0x31, 0xf4, 0x3c, 0x56, 0x8e, 0x7d, 0x7b, 0x8c, 0xb6, 0x21, 0xa7, 0x34, 0x11, 0x56, 0x03,
	0xc5, 0xcd, 0xc5, 0x93, 0xd3, 0x4d, 0xc9, 0x7c, 0x2b, 0xf4, 0xb4, 0xc7, 0x06, 0xf0, 0xe8, 0x37,
	0xfa, 0x01, 0x0a, 0x76, 0xa0, 0x09, 0xe6, 0x9b, 0x9c, 0x3a, 0x7a, 0x4e, 0x65, 0xdd, 0x3d, 0x39,
	0xdd, 0xfc, 0xec, 0x5d, 0x66, 0xd7, 0xa2, 0x8e, 0x8b, 0xc5, 0xd0, 0x27, 0x46, 0x3e, 0xaa, 0xd7,
	0xa2, 0x0e, 0x3a, 0x84, 0x82, 0xc5, 0x46, 0xc4, 0xc5, 0xae, 0x90, 0xe5, 0xb9, 0x9e, 0x2f, 0xa5,
	0x2b, 0xb9, 0xed, 0x9b, 0xe7, 0xb0, 0xbc, 0x1b, 0xc6, 0xee, 0xd8, 0xd8, 0x0b, 0x2a, 0x04, 0x55,
	0xb9, 0x91, 0x9f, 0x94, 0x69, 0x51, 0x87, 0xa3, 0x8f, 0xe1, 0xc2, 0xd0, 0xed, 0x30, 0xd7, 0x56,
	0x77, 0xa5, 0x03, 0xa2, 0x17, 0xd4, 0x50, 0x0a, 0x91, 0xb5, 0x4d, 0x07, 0x04, 0x7d, 0x0d, 0x45,
	0xa9, 0x8b, 0xa1, 0x6b, 0x47, 0xba, 0xd7, 0x2f, 0x28, 0x99, 0x5d, 0x3f, 0xa7, 0x81, 0x7a, 0x7b,
	0xf7, 0x30, 0x11, 0x6d, 0x2c, 0x77, 0x84, 0x95, 0x34, 0x48, 0x64, 0x0f, 0xfb, 0x78, 0xc0, 0xcd,
	0x11, 0xf1, 0xd5, 0x42, 0x5f, 0x0e, 0x90, 0x03, 0xeb, 0x93, 0xc0, 0x58, 0xfe, 0x35, 0x03, 0xcb,
	0x67, 0x6a, 0x49, 0x2d, 0x25, 0x9a, 0x1e, 0x07, 0x3b, 0xc9, 0xc8, 0xc5, 0x2d, 0xff, 0x8b, 0xc2,
	0xd4, 0xdb, 0x50, 0xf8, 0x23, 0x5c, 0x89, 0x29, 0x8c, 0x01, 0x24, 0x99, 0xe9, 0x59, 0xc9, 0xbc,
	0x1c, 0x55, 0x3e, 0x9c, 0x14, 0x96, 0xac, 0x32, 0x58, 0x4d, 0xa8, 0x66, 0xd2, 0xb0, 0x44, 0xcc,
	0xcc, 0x8a, 0xb8, 0x12, 0xcb, 0x27, 0xac, 0x2b, 0x01, 0x8f, 0x60, 0x35, 0x96, 0x51, 0x02, 0x8f,
	0xeb, 0xf3, 0xef, 0xa9, 0xa7, 0x95, 0x48, 0x4f, 0x31, 0x0c, 0x47, 0x16, 0xac, 0x47, 0x38, 0x53,
	0xa3, 0x0c, 0x16, 0x4b, 0x56, 0x81, 0x5d, 0x3b, 0x07, 0x2c, 0xaa, 0xbe, 0xef, 0x1e, 0x31, 0x43,
	0x9f, 0x14, 0x4a, 0x4e, 0x4e, 0xee, 0x94, 0x72, 0x0b, 0xae, 0xc4, 0xab, 0x98, 0xf9, 0xf1, 0x4e,
	0xe6, 0xe8, 0x0b, 0xc8, 0xd8, 0xa4, 0xcf, 0x75, 0xed, 0x8d, 0x40, 0x53, 0x8b, 0xdc, 0x50, 0x19,
	0xe5, 0x03, 0x58, 0x7f, 0x7d, 0xd1, 0x7d, 0xd7, 0x26, 0x63, 0x54, 0x83, 0x95, 0x78, 0xd1, 0x98,
	0x5d, 0xcc, 0xbb, 0xc1, 0x8d, 0x24, 0x50, 0xde, 0xb8, 0x18, 0xad, 0x9c, 0xfb, 0x98, 0x77, 0x55,
	0x93, 0x4f, 0x35, 0x28, 0x4c, 0x5d, 0x08, 0xdd, 0x83, 0xd4, 0xcc, 0x0f, 0x69, 0xca, 0xeb, 0xa1,
	0x07, 0x90, 0x96, 0x4a, 0x49, 0xcd, 0xaa, 0x14, 0x59, 0xa5, 0xfc, 0xb3, 0x06, 0x57, 0xcf, 0x25,
	0x59, 0x3e, 0x54, 0x16, 0x1b, 0x7d, 0x80, 0xf7, 0xdf, 0x62, 0xa3, 0x66, 0x4f, 0xfe, 0x81, 0x71,
	0x80, 0x11, 0x68, 0x2f, 0xa5, 0x86, 0x97, 0xc3, 0x11, 0x2e, 0x2f, 0xff, 0xa6, 0xc1, 0xd5, 0x16,
	0xe9, 0x13, 0xf5, 0xea, 0x4e, 0xa4, 0xb5, 0x27, 0xbf, 0x4a, 0x5c, 0x8b, 0xa0, 0xeb, 0xb0, 0x7c,
	0x86, 0x85, 0xe0, 0xdd, 0x35, 0x0a, 0x53, 0x04, 0x20, 0x03, 0x96, 0xa2, 0x27, 0x6d, 0xc6, 0x37,
	0x76, 0x21, 0x7c, 0xcd, 0xd0, 0x16, 0x5c, 0xf2, 0x89, 0xd4, 0xa4, 0x4f, 0x6c, 0x33, 0xac, 0xce,
	0x7b, 0xc1, 0x8a, 0x30, 0x8a, 0x91, 0xeb, 0x9e, 0x0c, 0x6f, 0xf5, 0x3e, 0xd9, 0x83, 0x4b, 0x53,
	0x32, 0x6b, 0x09, 0x2c, 0x86, 0x1c, 0xe5, 0x60, 0xa1, 0xb9, 0x77, 0xd0, 0xd8, 0x3f, 0xf8, 0xaa,
	0x38, 0x87, 0x00, 0xb2, 0x3b, 0xbb, 0xed, 0xfd, 0x27, 0x7b, 0x45, 0x0d, 0xe5, 0x61, 0xf1, 0xf0,
	0xa0, 0xfe, 0xf8, 0xa0, 0xb1, 0xd7, 0x28, 0xa6, 0xd0, 0x02, 0xa4, 0x77, 0x0e, 0xbe, 0x2d, 0xa6,
	0xeb, 0x0f, 0x7f, 0x7f, 0xb9, 0xa1, 0x3d, 0x7f, 0xb9, 0xa1, 0xfd, 0xf9, 0x72, 0x43, 0xfb, 0xe5,
	0xd5, 0xc6, 0xdc, 0xf3, 0x57, 0x1b, 0x73, 0x7f, 0xbc, 0xda, 0x98, 0xfb, 0xee, 0x3f, 0x2f, 0x33,
	0x4e, 0x7e, 0xda, 0xab, 0x9b, 0x75, 0xb2, 0xea, 0xd3, 0xfe, 0xf6, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xbc, 0xeb, 0x0e, 0xfb, 0x93, 0x0c, 0x00, 0x00,
}

func (m *FinalityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inactive {
		i--
		if m.Inactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SlashedBtcHeight != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.SlashedBtcHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.SlashedBabylonHeight != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.SlashedBabylonHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Pop != nil {
		{
			size, err := m.Pop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Commission != nil {
		{
			size := m.Commission.Size()
			i -= size
			if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintBtcstaking(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinalityProviderWithMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderWithMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderWithMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inactive {
		i--
		if m.Inactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SlashedBtcHeight != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.SlashedBtcHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.SlashedBabylonHeight != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.SlashedBabylonHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.VotingPower != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParamsVersion != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.ParamsVersion))
		i--
		dAtA[i] = 0x78
	}
	if m.BtcUndelegation != nil {
		{
			size, err := m.BtcUndelegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.UnbondingTime != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.UnbondingTime))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CovenantSigs) > 0 {
		for iNdEx := len(m.CovenantSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CovenantSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBtcstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.DelegatorSig != nil {
		{
			size := m.DelegatorSig.Size()
			i -= size
			if _, err := m.DelegatorSig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SlashingTx != nil {
		{
			size := m.SlashingTx.Size()
			i -= size
			if _, err := m.SlashingTx.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.StakingOutputIdx != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.StakingOutputIdx))
		i--
		dAtA[i] = 0x48
	}
	if len(m.StakingTx) > 0 {
		i -= len(m.StakingTx)
		copy(dAtA[i:], m.StakingTx)
		i = encodeVarintBtcstaking(dAtA, i, uint64(len(m.StakingTx)))
		i--
		dAtA[i] = 0x42
	}
	if m.TotalSat != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.TotalSat))
		i--
		dAtA[i] = 0x38
	}
	if m.EndHeight != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.StartHeight != 0 {
		i = encodeVarintBtcstaking(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FpBtcPkList) > 0 {
		for iNdEx := len(m.FpBtcPkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.FpBtcPkList[iNdEx].Size()
				i -= size
				if _, err := m.FpBtcPkList[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintBtcstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Pop != nil {
		{
			size, err := m.Pop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerAddr) > 0 {
		i -= len(m.StakerAddr)
		copy(dAtA[i:], m.StakerAddr)
		i = encodeVarintBtcstaking(dAtA, i, uint64(len(m.StakerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCUndelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCUndelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCUndelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CovenantUnbondingSigList) > 0 {
		for iNdEx := len(m.CovenantUnbondingSigList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CovenantUnbondingSigList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBtcstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CovenantSlashingSigs) > 0 {
		for iNdEx := len(m.CovenantSlashingSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CovenantSlashingSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBtcstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.DelegatorSlashingSig != nil {
		{
			size := m.DelegatorSlashingSig.Size()
			i -= size
			if _, err := m.DelegatorSlashingSig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DelegatorUnbondingSig != nil {
		{
			size := m.DelegatorUnbondingSig.Size()
			i -= size
			if _, err := m.DelegatorUnbondingSig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SlashingTx != nil {
		{
			size := m.SlashingTx.Size()
			i -= size
			if _, err := m.SlashingTx.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingTx) > 0 {
		i -= len(m.UnbondingTx)
		copy(dAtA[i:], m.UnbondingTx)
		i = encodeVarintBtcstaking(dAtA, i, uint64(len(m.UnbondingTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegatorDelegations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegatorDelegations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegatorDelegations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dels) > 0 {
		for iNdEx := len(m.Dels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBtcstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegatorDelegationIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegatorDelegationIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegatorDelegationIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingTxHashList) > 0 {
		for iNdEx := len(m.StakingTxHashList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StakingTxHashList[iNdEx])
			copy(dAtA[i:], m.StakingTxHashList[iNdEx])
			i = encodeVarintBtcstaking(dAtA, i, uint64(len(m.StakingTxHashList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignatureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sig != nil {
		{
			size := m.Sig.Size()
			i -= size
			if _, err := m.Sig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pk != nil {
		{
			size := m.Pk.Size()
			i -= size
			if _, err := m.Pk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CovenantAdaptorSignatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CovenantAdaptorSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CovenantAdaptorSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdaptorSigs) > 0 {
		for iNdEx := len(m.AdaptorSigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AdaptorSigs[iNdEx])
			copy(dAtA[i:], m.AdaptorSigs[iNdEx])
			i = encodeVarintBtcstaking(dAtA, i, uint64(len(m.AdaptorSigs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CovPk != nil {
		{
			size := m.CovPk.Size()
			i -= size
			if _, err := m.CovPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SelectiveSlashingEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectiveSlashingEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectiveSlashingEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecoveredFpBtcSk) > 0 {
		i -= len(m.RecoveredFpBtcSk)
		copy(dAtA[i:], m.RecoveredFpBtcSk)
		i = encodeVarintBtcstaking(dAtA, i, uint64(len(m.RecoveredFpBtcSk)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FpBtcPk != nil {
		{
			size := m.FpBtcPk.Size()
			i -= size
			if _, err := m.FpBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintBtcstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingTxHash) > 0 {
		i -= len(m.StakingTxHash)
		copy(dAtA[i:], m.StakingTxHash)
		i = encodeVarintBtcstaking(dAtA, i, uint64(len(m.StakingTxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBtcstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovBtcstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FinalityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.Commission != nil {
		l = m.Commission.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.Pop != nil {
		l = m.Pop.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.SlashedBabylonHeight != 0 {
		n += 1 + sovBtcstaking(uint64(m.SlashedBabylonHeight))
	}
	if m.SlashedBtcHeight != 0 {
		n += 1 + sovBtcstaking(uint64(m.SlashedBtcHeight))
	}
	if m.Inactive {
		n += 2
	}
	return n
}

func (m *FinalityProviderWithMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBtcstaking(uint64(m.Height))
	}
	if m.VotingPower != 0 {
		n += 1 + sovBtcstaking(uint64(m.VotingPower))
	}
	if m.SlashedBabylonHeight != 0 {
		n += 1 + sovBtcstaking(uint64(m.SlashedBabylonHeight))
	}
	if m.SlashedBtcHeight != 0 {
		n += 1 + sovBtcstaking(uint64(m.SlashedBtcHeight))
	}
	if m.Inactive {
		n += 2
	}
	return n
}

func (m *BTCDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerAddr)
	if l > 0 {
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.Pop != nil {
		l = m.Pop.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if len(m.FpBtcPkList) > 0 {
		for _, e := range m.FpBtcPkList {
			l = e.Size()
			n += 1 + l + sovBtcstaking(uint64(l))
		}
	}
	if m.StartHeight != 0 {
		n += 1 + sovBtcstaking(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovBtcstaking(uint64(m.EndHeight))
	}
	if m.TotalSat != 0 {
		n += 1 + sovBtcstaking(uint64(m.TotalSat))
	}
	l = len(m.StakingTx)
	if l > 0 {
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.StakingOutputIdx != 0 {
		n += 1 + sovBtcstaking(uint64(m.StakingOutputIdx))
	}
	if m.SlashingTx != nil {
		l = m.SlashingTx.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.DelegatorSig != nil {
		l = m.DelegatorSig.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if len(m.CovenantSigs) > 0 {
		for _, e := range m.CovenantSigs {
			l = e.Size()
			n += 1 + l + sovBtcstaking(uint64(l))
		}
	}
	if m.UnbondingTime != 0 {
		n += 1 + sovBtcstaking(uint64(m.UnbondingTime))
	}
	if m.BtcUndelegation != nil {
		l = m.BtcUndelegation.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.ParamsVersion != 0 {
		n += 1 + sovBtcstaking(uint64(m.ParamsVersion))
	}
	return n
}

func (m *BTCUndelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UnbondingTx)
	if l > 0 {
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.SlashingTx != nil {
		l = m.SlashingTx.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.DelegatorUnbondingSig != nil {
		l = m.DelegatorUnbondingSig.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.DelegatorSlashingSig != nil {
		l = m.DelegatorSlashingSig.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if len(m.CovenantSlashingSigs) > 0 {
		for _, e := range m.CovenantSlashingSigs {
			l = e.Size()
			n += 1 + l + sovBtcstaking(uint64(l))
		}
	}
	if len(m.CovenantUnbondingSigList) > 0 {
		for _, e := range m.CovenantUnbondingSigList {
			l = e.Size()
			n += 1 + l + sovBtcstaking(uint64(l))
		}
	}
	return n
}

func (m *BTCDelegatorDelegations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dels) > 0 {
		for _, e := range m.Dels {
			l = e.Size()
			n += 1 + l + sovBtcstaking(uint64(l))
		}
	}
	return n
}

func (m *BTCDelegatorDelegationIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakingTxHashList) > 0 {
		for _, b := range m.StakingTxHashList {
			l = len(b)
			n += 1 + l + sovBtcstaking(uint64(l))
		}
	}
	return n
}

func (m *SignatureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pk != nil {
		l = m.Pk.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.Sig != nil {
		l = m.Sig.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	return n
}

func (m *CovenantAdaptorSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CovPk != nil {
		l = m.CovPk.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if len(m.AdaptorSigs) > 0 {
		for _, b := range m.AdaptorSigs {
			l = len(b)
			n += 1 + l + sovBtcstaking(uint64(l))
		}
	}
	return n
}

func (m *SelectiveSlashingEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHash)
	if l > 0 {
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	if m.FpBtcPk != nil {
		l = m.FpBtcPk.Size()
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	l = len(m.RecoveredFpBtcSk)
	if l > 0 {
		n += 1 + l + sovBtcstaking(uint64(l))
	}
	return n
}

func sovBtcstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBtcstaking(x uint64) (n int) {
	return sovBtcstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FinalityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.Description{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Commission = &v
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pop == nil {
				m.Pop = &ProofOfPossessionBTC{}
			}
			if err := m.Pop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBabylonHeight", wireType)
			}
			m.SlashedBabylonHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedBabylonHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBtcHeight", wireType)
			}
			m.SlashedBtcHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedBtcHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inactive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalityProviderWithMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderWithMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderWithMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBabylonHeight", wireType)
			}
			m.SlashedBabylonHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedBabylonHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedBtcHeight", wireType)
			}
			m.SlashedBtcHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedBtcHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inactive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pop == nil {
				m.Pop = &ProofOfPossessionBTC{}
			}
			if err := m.Pop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPkList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.FpBtcPkList = append(m.FpBtcPkList, v)
			if err := m.FpBtcPkList[len(m.FpBtcPkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSat", wireType)
			}
			m.TotalSat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSat |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTx = append(m.StakingTx[:0], dAtA[iNdEx:postIndex]...)
			if m.StakingTx == nil {
				m.StakingTx = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingOutputIdx", wireType)
			}
			m.StakingOutputIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingOutputIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v BTCSlashingTx
			m.SlashingTx = &v
			if err := m.SlashingTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340Signature
			m.DelegatorSig = &v
			if err := m.DelegatorSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantSigs = append(m.CovenantSigs, &CovenantAdaptorSignatures{})
			if err := m.CovenantSigs[len(m.CovenantSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			m.UnbondingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcUndelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcUndelegation == nil {
				m.BtcUndelegation = &BTCUndelegation{}
			}
			if err := m.BtcUndelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamsVersion", wireType)
			}
			m.ParamsVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamsVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCUndelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCUndelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCUndelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingTx = append(m.UnbondingTx[:0], dAtA[iNdEx:postIndex]...)
			if m.UnbondingTx == nil {
				m.UnbondingTx = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v BTCSlashingTx
			m.SlashingTx = &v
			if err := m.SlashingTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorUnbondingSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340Signature
			m.DelegatorUnbondingSig = &v
			if err := m.DelegatorUnbondingSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorSlashingSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340Signature
			m.DelegatorSlashingSig = &v
			if err := m.DelegatorSlashingSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantSlashingSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantSlashingSigs = append(m.CovenantSlashingSigs, &CovenantAdaptorSignatures{})
			if err := m.CovenantSlashingSigs[len(m.CovenantSlashingSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovenantUnbondingSigList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CovenantUnbondingSigList = append(m.CovenantUnbondingSigList, &SignatureInfo{})
			if err := m.CovenantUnbondingSigList[len(m.CovenantUnbondingSigList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegatorDelegations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegatorDelegations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegatorDelegations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dels = append(m.Dels, &BTCDelegation{})
			if err := m.Dels[len(m.Dels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegatorDelegationIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegatorDelegationIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegatorDelegationIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHashList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHashList = append(m.StakingTxHashList, make([]byte, postIndex-iNdEx))
			copy(m.StakingTxHashList[len(m.StakingTxHashList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.Pk = &v
			if err := m.Pk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340Signature
			m.Sig = &v
			if err := m.Sig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CovenantAdaptorSignatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CovenantAdaptorSignatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CovenantAdaptorSignatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CovPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.CovPk = &v
			if err := m.CovPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdaptorSigs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdaptorSigs = append(m.AdaptorSigs, make([]byte, postIndex-iNdEx))
			copy(m.AdaptorSigs[len(m.AdaptorSigs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectiveSlashingEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectiveSlashingEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectiveSlashingEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.FpBtcPk = &v
			if err := m.FpBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveredFpBtcSk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBtcstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveredFpBtcSk = append(m.RecoveredFpBtcSk[:0], dAtA[iNdEx:postIndex]...)
			if m.RecoveredFpBtcSk == nil {
				m.RecoveredFpBtcSk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBtcstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBtcstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtcstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBtcstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBtcstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBtcstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBtcstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBtcstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBtcstaking = fmt.Errorf("proto: unexpected end of group")
)
